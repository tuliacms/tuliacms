<?php

declare(strict_types=1);

namespace Tulia\Cms\Node\Infrastructure\Persistence\Domain;

use Tulia\Cms\Node\Domain\Enum\TermTypeEnum;
use Tulia\Cms\Platform\Domain\ValueObject\ImmutableDateTime;
use Tulia\Component\Routing\Website\CurrentWebsiteInterface;
use Tulia\Cms\Shared\Ports\Infrastructure\Persistence\DBAL\ConnectionInterface;

/**
 * @author Adam Banaszkiewicz
 */
class DbalPersister
{
    /**
     * @var ConnectionInterface
     */
    protected $connection;

    /**
     * @var CurrentWebsiteInterface
     */
    protected $currentWebsite;

    /**
     * @param ConnectionInterface $connection
     * @param CurrentWebsiteInterface $currentWebsite
     */
    public function __construct(
        ConnectionInterface $connection,
        CurrentWebsiteInterface $currentWebsite
    ) {
        $this->connection     = $connection;
        $this->currentWebsite = $currentWebsite;
    }

    /**
     * {@inheritdoc}
     */
    public function insert(array $node): void
    {
        if (empty($node['locale'])) {
            $node['locale'] = $this->currentWebsite->getLocale()->getCode();
        }

        $mainTable = [];
        $langTable = [];

        $mainTable['id'] = $node['id'];
        $mainTable['author_id'] = $node['authorId'];
        $mainTable['parent_id'] = empty($node['parentId']) ? null : $node['parentId'];
        $mainTable['level'] = $this->calculateLevel($node['parentId']);
        $mainTable['type'] = $node['type'];
        $mainTable['status'] = $node['status'];
        $mainTable['website_id'] = $node['websiteId'];
        $mainTable['published_at'] = $this->formatDate($node['publishedAt']);
        $mainTable['published_to'] = $this->formatDate($node['publishedTo']);
        $mainTable['created_at'] = $this->formatDate(new ImmutableDateTime());
        $mainTable['updated_at'] = null;

        $langTable['node_id'] = $node['id'];
        $langTable['locale'] = $node['locale'];
        $langTable['title'] = $node['title'];
        $langTable['slug'] = $node['slug'];
        $langTable['introduction'] = $node['introduction'];
        $langTable['content'] = $node['content'];
        $langTable['content_source'] = $node['contentSource'];

        $this->connection->insert('#__node', $mainTable);
        $this->connection->insert('#__node_lang', $langTable);

        foreach ($this->currentWebsite->getLocales() as $i => $locale) {
            // Skip current locale, is already in DB.
            if ($node['locale'] === $locale->getCode()) {
                continue;
            }

            $langTable['locale'] = $locale->getCode();
            $langTable['autogenerated_locale'] = 1;

            $this->connection->insert('#__node_lang', $langTable);
        }

        $this->insertCategories($node['id'], $node['category'] ? [$node['category']] : [], TermTypeEnum::MAIN);
    }

    /**
     * {@inheritdoc}
     */
    public function update(array $node): void
    {
        if (empty($node['locale'])) {
            $node['locale'] = $this->currentWebsite->getLocale()->getCode();
        }

        $mainTable = [];
        $langTable = [];

        $mainTable['author_id']    = $node['authorId'];
        $mainTable['parent_id']    = empty($node['parentId']) ? null : $node['parentId'];
        $mainTable['level']        = $this->calculateLevel($node['parentId']);
        $mainTable['type']         = $node['type'];
        $mainTable['status']       = $node['status'];
        $mainTable['published_at'] = $this->formatDate($node['publishedAt']);
        $mainTable['published_to'] = $this->formatDate($node['publishedTo']);
        $mainTable['updated_at']   = (new \DateTime())->format('Y-m-d H:i:s');

        $langTable['title']          = $node['title'];
        $langTable['slug']           = $node['slug'];
        $langTable['introduction']   = $node['introduction'];
        $langTable['content']        = $node['content'];
        $langTable['content_source'] = $node['contentSource'];
        $langTable['autogenerated_locale'] = 0;

        $this->connection->update('#__node', $mainTable, ['id' => $node['id']]);

        /**
         * Update in two steps. First update current locale.
         * Next update all rows with autogenerated_locale=1,
         * when update in default locale.
         */
        $this->connection->update('#__node_lang', $langTable, ['node_id' => $node['id'], 'locale' => $node['locale']]);

        if ($this->currentWebsite->getLocale()->getCode() === $node['locale']) {
            unset($langTable['autogenerated_locale']);
            $this->connection->update('#__node_lang', $langTable, ['node_id' => $node['id'], 'autogenerated_locale' => 1]);
        }

        $this->insertCategories($node['id'], $node['category'] ? [$node['category']] : [], TermTypeEnum::MAIN);
    }

    /**
     * {@inheritdoc}
     */
    public function delete(array $node): void
    {
        $this->connection->delete('#__node', ['id' => $node['id']]);
        $this->connection->delete('#__node_lang', ['node_id' => $node['id']]);
        $this->connection->delete('#__node_term_relationship', ['node_id' => $node['id']]);
    }

    /**
     * @param $input
     *
     * @return string|null
     */
    private function formatDate($input): ?string
    {
        if ($input instanceof \DateTime || $input instanceof ImmutableDateTime) {
            return $input->format('Y-m-d H:i:s');
        }

        return $input;
    }

    /**
     * @param string|null $parentId
     *
     * @return int
     */
    private function calculateLevel(?string $parentId): int
    {
        if (!$parentId) {
            return 0;
        }

        $level = $this->connection->fetchColumn('SELECT `level` FROM #__node WHERE id = :id LIMIT 1', [
            'id' => $parentId,
        ]);

        if ($level === null) {
            return 0;
        }

        return $level + 1;
    }

    private function insertCategories(string $nodeId, array $new, string $type): void
    {
        // There can be only one MAIN category for node.
        if ($type === 'MAIN' && count($new) > 1) {
            $new = [$new[0]];
        }

        $current = $this->connection->fetchAll('
            SELECT term_id
            FROM #__node_term_relationship
            WHERE node_id = :node_id AND `type` = :type', [
            'type'    => $type,
            'node_id' => $nodeId,
        ]);
        $current = array_column($current, 'term_id');

        $toUpdate = array_intersect($new, $current);
        $toAdd    = array_diff($new, $toUpdate);
        $toRemove = array_diff($current, $toUpdate);

        $this->connection->delete('#__node_term_relationship', [
            'node_id' => $nodeId,
            'term_id' => $toRemove,
        ], [
            'node_id' => \PDO::PARAM_STR,
            'term_id' => ConnectionInterface::PARAM_ARRAY_STR,
        ]);

        foreach ($toAdd as $termId) {
            $this->connection->insert('#__node_term_relationship', [
                'node_id' => $nodeId,
                'term_id' => $termId,
                'type'    => $type,
            ]);
        }
    }
}

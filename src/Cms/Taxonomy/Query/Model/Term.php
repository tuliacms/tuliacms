<?php

declare(strict_types=1);

namespace Tulia\Cms\Taxonomy\Query\Model;

use DateTime;
use Exception;
use InvalidArgumentException;
use Tulia\Cms\Metadata\Domain\ReadModel\MagickMetadataTrait;

/**
 * @author Adam Banaszkiewicz
 */
class Term
{
    use MagickMetadataTrait;

    protected $id;
    protected $type;
    protected $websiteId;
    protected $parentId;
    protected $level;
    protected $count;
    protected $locale;
    protected $name;
    protected $slug;
    protected $visibility;
    protected $autogeneratedLocale;

    /**
     * @param array $date
     * @return Term
     * @throws Exception
     */
    public static function buildFromArray(array $data): self
    {
        $node = new self();

        if (isset($data['id']) === false) {
            throw new InvalidArgumentException('Term ID must be provided.');
        }

        if (isset($data['website_id']) === false) {
            throw new InvalidArgumentException('Term website_id must be provided.');
        }

        if (isset($data['type']) === false) {
            throw new InvalidArgumentException('Term type (taxonomy type) must be provided.');
        }

        if (isset($data['locale']) === false) {
            $data['locale'] = 'en_US';
        }

        $node->setId($data['id']);
        $node->setType($data['type']);
        $node->setWebsiteId($data['website_id']);
        $node->setParentId($data['parent_id'] ?? null);
        $node->setLevel((int) ($data['level'] ?? 0));
        $node->setCount((int) ($data['count'] ?? 0));
        $node->setLocale($data['locale']);
        $node->setName($data['name'] ?? '');
        $node->setSlug($data['slug'] ?? '');
        $node->setVisibility($data['visibility'] ?? 0);
        $node->setAutogeneratedLocale($data['autogenerated_locale'] ?? false);

        $node->replaceMetadata($data['metadata'] ?? []);

        return $node;
    }

    private static function setDatetime(array $data, string $key, $default = null): array
    {
        if (\array_key_exists($key, $data) === false) {
            $data[$key] = $default;
        } elseif ($data[$key] === null && $default === null) {
            // Do nothing, allow to null;
        } elseif ($data[$key] instanceof DateTime === false) {
            $data[$key] = new DateTime($data[$key]);
        }

        return $data;
    }

    public function hasId(): bool
    {
        return (bool) $this->id;
    }

    public function getId(): string
    {
        return $this->id;
    }

    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    public function getType(): string
    {
        return $this->type;
    }

    public function setType(string $type): void
    {
        $this->type = $type;
    }

    public function getWebsiteId(): ?string
    {
        return $this->websiteId;
    }

    public function setWebsiteId(?string $websiteId): void
    {
        $this->websiteId = $websiteId;
    }

    public function getParentId(): ?string
    {
        return $this->parentId;
    }

    public function setParentId(?string $parentId): void
    {
        $this->parentId = $parentId;
    }

    public function getLevel(): int
    {
        return $this->level;
    }

    public function setLevel(int $level): void
    {
        $this->level = $level;
    }

    public function getCount(): int
    {
        return $this->count;
    }

    public function setCount(int $count): void
    {
        $this->count = $count;
    }

    public function getLocale(): ?string
    {
        return $this->locale;
    }

    public function setLocale(?string $locale): void
    {
        $this->locale = $locale;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    public function getSlug(): ?string
    {
        return $this->slug;
    }

    public function setSlug(?string $slug): void
    {
        $this->slug = $slug;
    }

    public function getVisibility(): bool
    {
        return (bool) $this->visibility;
    }

    public function setVisibility($visibility): void
    {
        $this->visibility = (bool) $visibility;
    }

    public function getAutogeneratedLocale(): bool
    {
        return $this->autogeneratedLocale;
    }

    public function setAutogeneratedLocale($autogeneratedLocale): void
    {
        $this->autogeneratedLocale = (bool) $autogeneratedLocale;
    }
}

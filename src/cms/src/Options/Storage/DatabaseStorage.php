<?php

declare(strict_types=1);

namespace Tulia\Cms\Options\Storage;

use Tulia\Component\Routing\Website\CurrentWebsiteInterface;
use Tulia\Framework\Database\ConnectionInterface;

/**
 * @author Adam Banaszkiewicz
 */
class DatabaseStorage implements StorageInterface
{
    /**
     * @var ConnectionInterface
     */
    protected $connection;

    /**
     * @var CurrentWebsiteInterface
     */
    protected $currentWebsite;

    /**
     * @var array
     */
    protected $cache = [];

    /**
     * @param ConnectionInterface $connection
     * @param CurrentWebsiteInterface $currentWebsite
     */
    public function __construct(
        ConnectionInterface $connection,
        CurrentWebsiteInterface $currentWebsite
    ) {
        $this->connection     = $connection;
        $this->currentWebsite = $currentWebsite;

        //$this->autoload();
    }

    /**
     * @return string
     */
    protected function getLocale(): string
    {
        return $this->currentWebsite->getLocale()->getCode();
    }

    /**
     * @return string
     */
    protected function getDefaultLocale(): string
    {
        return $this->currentWebsite->getDefaultLocale()->getCode();
    }

    /**
     * @return array
     */
    protected function getAvailableLocales(): array
    {
        return array_map(function ($locale) {
            return $locale->getCode();
        }, $this->currentWebsite->getLocales());
    }

    /**
     * {@inheritdoc}
     */
    public function get(string $name, $default = null)
    {
        if (isset($this->cache[$name])) {
            return $this->cache[$name];
        }

        $result = $this->query($name);

        return $this->cache[$name] = $result['value'] ?? $default;
    }

    /**
     * {@inheritdoc}
     */
    public function set(string $name, $value): void
    {
        $result = $this->getOption($name);

        $this->cache[$name] = $value;

        if ($result === []) {
            return;
        }

        $data = [
            'value' => $value,
            'autogenerated_locale' => '0',
        ];

        if ($result['multilingual'] === true) {
            $locale = $this->getLocale();

            $this->connection->update('#__option_lang', $data, [
                'option_id' => $result['id'],
                'locale'    => $locale,
            ]);

            /**
             * Update rows with locales created automatically from main locale,
             * only if updated element is from default locale.
             */
            if ($locale === $this->getDefaultLocale()) {
                unset($data['autogenerated_locale']);

                $this->connection->update('#__option_lang', $data, [
                    'option_id' => $result['id'],
                    'autogenerated_locale' => '1',
                ]);
            }
        } else {
            $this->connection->update('#__option_lang', $data, [
                'option_id' => $result['id'],
            ]);
        }
    }

    /**
     * {@inheritdoc}
     */
    public function has(string $name): bool
    {
        $result = $this->query($name);

        return isset($result['value']);
    }

    /**
     * {@inheritdoc}
     */
    public function remove(string $name): void
    {
        $id = $this->connection->fetchColumn('SELECT `id`
            FROM #__option tm
            INNER JOIN #__option_lang tl
                ON tm.id = tl.option_id
            WHERE `name` = :name AND website_id = :websiteId', [
            'name'      => $name,
            'websiteId' => $this->currentWebsite->getId(),
        ]);

        $this->connection->delete('#__option', ['id' => $id]);
        $this->connection->delete('#__option_lang', ['option_id' => $id]);
    }

    /**
     * {@inheritdoc}
     */
    public function rename(string $old, string $new): void
    {
        $this->connection->update('#__option', [
            'name' => $new,
        ], [
            'name' => $old,
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function preload(array $names = []): void
    {
        if ($names === []) {
            $result = $this->connection->fetchAll('SELECT `value`
            FROM #__option tm
            INNER JOIN #__option_lang tl
                ON tm.id = tl.option_id AND locale = :locale
            WHERE website_id = :websiteId', [
                'locale'    => $this->getLocale(),
                'websiteId' => $this->currentWebsite->getId(),
            ]);
        } else {
            $result = $this->connection->fetchAll('SELECT `value`
            FROM #__option tm
            INNER JOIN #__option_lang tl
                ON tm.id = tl.option_id AND locale = :locale
            WHERE `name` IN (:names) AND website_id = :websiteId', [
                'locale'    => $this->getLocale(),
                'names'     => $names,
                'websiteId' => $this->currentWebsite->getId(),
            ], [
                'names' => ConnectionInterface::PARAM_ARRAY_STR,
            ]);
        }

        foreach ($result as $row) {
            if (isset($row['name'])) {
                $this->cache[$row['name']] = $row['value'];
            }
        }
    }

    /**
     * {@inheritdoc}
     */
    public function create(string $name, $value, bool $multilingual = false, bool $autoload = null): void
    {
        $id = $this->connection->fetchColumn('SELECT `id`
            FROM #__option tm
            INNER JOIN #__option_lang tl
                ON tm.id = tl.option_id
            WHERE `name` = :name AND website_id = :websiteId', [
            'name'      => $name,
            'websiteId' => $this->currentWebsite->getId(),
        ]);

        /**
         * Update if already exists.
         */
        if ($id) {
            $this->connection->update('#__option', [
                'multilingual' => $multilingual ? 1 : 0,
                'autoload'     => $autoload === true ? '1' : '0',
            ], [
                'id' => $id,
            ]);
        } else {
            $this->connection->insert('#__option', [
                'name'         => $name,
                'multilingual' => $multilingual ? 1 : 0,
                'autoload'     => $autoload === true ? '1' : '0',
                'website_id'   => $this->currentWebsite->getId(),
            ]);

            $id = $this->connection->fetchColumn('SELECT LAST_INSERT_ID()');
            $currentLocale = $this->getLocale();

            foreach ($this->getAvailableLocales() as $locale) {
                $this->connection->insert('#__option_lang', [
                    'option_id'  => $id,
                    'value'      => $value,
                    'locale'     => $locale,
                    'autogenerated_locale' => (string) $locale === $currentLocale ? '0' : '1',
                ]);
            }
        }
    }

    /**
     * {@inheritdoc}
     */
    protected function query($name): array
    {
        $result = $this->connection->fetchAll('SELECT `value`
            FROM #__option tm
            INNER JOIN #__option_lang tl
                ON tm.id = tl.option_id AND locale = :locale
            WHERE `name` = :name AND website_id = :websiteId
            LIMIT 1', [
            'name'      => $name,
            'locale'    => $this->getLocale(),
            'websiteId' => $this->currentWebsite->getId(),
        ]);

        return $result[0] ?? [];
    }

    /**
     * @param string $name
     *
     * @return array
     */
    protected function getOption(string $name): array
    {
        $result = $this->connection->fetchAll('SELECT *
            FROM #__option tm
            INNER JOIN #__option_lang tl
                ON tm.id = tl.option_id AND locale = :locale
            WHERE `name` = :name AND website_id = :websiteId
            LIMIT 1', [
            'name'      => $name,
            'locale'    => $this->getLocale(),
            'websiteId' => $this->currentWebsite->getId(),
        ]);

        return $result[0] ?? [];
    }

    /**
     * {@inheritdoc}
     */
    protected function autoload(): void
    {
        $result = $this->connection->fetchAll('SELECT `value`
            FROM #__option tm
            INNER JOIN #__option_lang tl
                ON tm.id = tl.option_id AND locale = :locale
            WHERE autoload = 1 AND website_id = :websiteId', [
            'locale'    => $this->getLocale(),
            'websiteId' => $this->currentWebsite->getId(),
        ]);

        foreach ($result as $row) {
            $this->cache[$row['name']] = $row['value'];
        }
    }
}

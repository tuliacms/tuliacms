<?php

declare(strict_types=1);

namespace Tulia\Cms\Widget\Query\Model;

/**
 * @author Adam Banaszkiewicz
 */
class Widget
{
    /**
     * @var null|string
     */
    protected $id;

    /**
     * @var null|string
     */
    protected $websiteId;

    /**
     * @var null|string
     */
    protected $widgetId;

    /**
     * @var null|string
     */
    protected $space;

    /**
     * @var null|string
     */
    protected $name;

    /**
     * @var null|string
     */
    protected $htmlClass;

    /**
     * @var null|string
     */
    protected $htmlId;

    /**
     * @var array
     */
    protected $styles = [];

    /**
     * @var array
     */
    protected $payload = [];

    /**
     * @var null|string
     */
    protected $locale;

    /**
     * @var null|string
     */
    protected $title;

    /**
     * @var bool
     */
    protected $visibility;

    /**
     * @var array
     */
    protected $payloadLocalized = [];

    /**
     * @var bool
     */
    protected $translated;

    /**
     * @var string[]
     */
    protected static $fields = [
        'id'         => 'id',
        'website_id' => 'websiteId',
        'space'      => 'space',
        'name'       => 'name',
        'html_class' => 'htmlClass',
        'html_id'    => 'htmlId',
        'styles'     => 'styles',
        'payload'    => 'payload',
        'locale'     => 'locale',
        'title'      => 'title',
        'visibility' => 'visibility',
        'payload_localized' => 'payloadLocalized',
        'autogenerated_locale' => 'autogeneratedLocale',
    ];

    /**
     * @param array $data
     *
     * @return Widget
     *
     * @throws \Exception
     */
    public static function buildFromArray(array $data): self
    {
        $widget = new self();

        if (isset($data['id']) === false) {
            throw new \InvalidArgumentException('Node ID must be provided.');
        }

        if (isset($data['website_id']) === false) {
            throw new \InvalidArgumentException('Node website_id must be provided.');
        }

        if (isset($data['locale']) === false) {
            $data['locale'] = 'en_US';
        }

        $widget->setId($data['id']);
        $widget->setWebsiteId($data['website_id']);
        $widget->setWidgetId($data['widget_id'] ?? '');
        $widget->setSpace($data['space'] ?? '');
        $widget->setName($data['name'] ?? '');
        $widget->setHtmlClass($data['html_class'] ?? '');
        $widget->setHtmlId($data['html_id'] ?? '');
        $widget->setStyles($data['styles'] ?? []);
        $widget->setPayload($data['payload'] ?? []);
        $widget->setLocale($data['locale']);
        $widget->setTitle($data['title'] ?? '');
        $widget->setVisibility($data['visibility'] ?? true);
        $widget->setPayloadLocalized($data['payload_localized'] ?? []);
        $widget->setTranslated((bool) ($data['translated'] ?? false));

        return $widget;
    }

    /**
     * {@inheritdoc}
     */
    public function toArray(array $params = []): array
    {
        $params = array_merge([
            'skip' => [],
        ], $params);

        $result = [];

        foreach (static::$fields as $key => $property) {
            $result[$key] = $this->{$property};
        }

        foreach ($params['skip'] as $skip) {
            unset($result[$skip]);
        }

        return $result;
    }

    /**
     * @return bool
     */
    public function hasId(): bool
    {
        return (bool) $this->id;
    }

    /**
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * @param string|null $id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * @return string|null
     */
    public function getWebsiteId(): ?string
    {
        return $this->websiteId;
    }

    /**
     * @param string|null $websiteId
     */
    public function setWebsiteId(?string $websiteId): void
    {
        $this->websiteId = $websiteId;
    }

    /**
     * @return string|null
     */
    public function getWidgetId(): ?string
    {
        return $this->widgetId;
    }

    /**
     * @param string|null $widgetId
     */
    public function setWidgetId(?string $widgetId): void
    {
        $this->widgetId = $widgetId;
    }

    /**
     * @return string|null
     */
    public function getSpace(): ?string
    {
        return $this->space;
    }

    /**
     * @param string|null $space
     */
    public function setSpace(?string $space): void
    {
        $this->space = $space;
    }

    /**
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * @param string|null $name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * @return string|null
     */
    public function getHtmlClass(): ?string
    {
        return $this->htmlClass;
    }

    /**
     * @param string|null $htmlClass
     */
    public function setHtmlClass(?string $htmlClass): void
    {
        $this->htmlClass = $htmlClass;
    }

    /**
     * @return string|null
     */
    public function getHtmlId(): ?string
    {
        return $this->htmlId;
    }

    /**
     * @param string|null $htmlId
     */
    public function setHtmlId(?string $htmlId): void
    {
        $this->htmlId = $htmlId;
    }

    /**
     * @return array
     */
    public function getStyles(): array
    {
        return $this->styles;
    }

    /**
     * @param array $styles
     */
    public function setStyles(array $styles): void
    {
        $this->styles = $styles;
    }

    /**
     * @return array
     */
    public function getPayload(): array
    {
        return $this->payload;
    }

    /**
     * @param array $payload
     */
    public function setPayload(array $payload): void
    {
        $this->payload = $payload;
    }

    /**
     * @return string|null
     */
    public function getLocale(): ?string
    {
        return $this->locale;
    }

    /**
     * @param string|null $locale
     */
    public function setLocale(?string $locale): void
    {
        $this->locale = $locale;
    }

    /**
     * @return string|null
     */
    public function getTitle(): ?string
    {
        return $this->title;
    }

    /**
     * @param string|null $title
     */
    public function setTitle(?string $title): void
    {
        $this->title = $title;
    }

    /**
     * @return bool
     */
    public function getVisibility(): bool
    {
        return (bool) $this->visibility;
    }

    /**
     * @param bool $visibility
     */
    public function setVisibility($visibility): void
    {
        $this->visibility = (bool) $visibility;
    }

    /**
     * @return array
     */
    public function getPayloadLocalized(): array
    {
        return $this->payloadLocalized;
    }

    /**
     * @param array $payloadLocalized
     */
    public function setPayloadLocalized(array $payloadLocalized): void
    {
        $this->payloadLocalized = $payloadLocalized;
    }

    /**
     * @return bool
     */
    public function isTranslated(): bool
    {
        return $this->translated;
    }

    /**
     * @param bool $translated
     */
    public function setTranslated(bool $translated): void
    {
        $this->translated = $translated;
    }
}
